\ Some examples of simple list functions

\ take head of list
(define car (lambda ((a . d)) a))

\ take tail of list
(define cdr (lambda ((a . d)) d))

\ take head of head of list
(define caar (lambda (((aa . da) . d)) aa))

\ take head of tail of list
(define cadr (lambda ((a ad . dd)) ad))

\ take tail of head of list
(define cdar (lambda (((aa . da) . d)) da))

\ take tail of tail of list
(define cddr (lambda ((a ad . dd)) dd))

\ make a list of all arguments
(define list (lambda l l))

\ append two lists
(define append
   (lambda (() bs) bs
           ((a . as) bs) (cons a (append as bs))))

\ equality test
(define equal (lambda (x x) 'T (x y) ()))
